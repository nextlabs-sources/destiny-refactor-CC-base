<?xml version="1.0" ?>
<!DOCTYPE project [
<!ENTITY classpaths SYSTEM "build-scripts/etc/classpath.skel">
<!ENTITY taskdefs SYSTEM "build-scripts/etc/build-tasks.skel">
]>

<project name="Destiny" default="build-all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <tstamp>
        <format property="TODAY" pattern="yyyy-MM-dd"  locale="en,UK" />
    </tstamp>
    <property environment="env"/>
    <echo message="NL External Dir : ${env.NLEXTERNALDIR2}" />

    <!-- Notes: nlbuildroot must be defined before build-scripts/etc/build.properties and
         build-scripts/etc/build_external.properties
    -->
    <property name="nlbuildroot" location="${basedir}/.." />

    <property file="${nlbuildroot}/scripts/build.properties" />
    <property file="${nlbuildroot}/src/build-scripts/etc/build.properties" />
    <property file="${nlbuildroot}/src/build-scripts/etc/build_external.properties"/>

    <!-- Need to set this while build.xml lived in this directory rather that top directory -->
    <property name="ivy.dep.file" value="../ivy.xml" />
    <property name="package_chef_dir" value="${build.root.dir}/cc_chef" />
    <property name="cc_chef_linux_dir" value="${package_chef_dir}/cc_linux" />
    <property name="cc_chef_win_dir" value="${package_chef_dir}/cc_win" />
	<property name="package_linux_dir" value="${build.root.dir}/package_linux" />

    &classpaths;

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${xlib_jar_dir}/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <!-- FIX ME - Property should be placed in properties file eventually when top level build file moves -->
    <property name="common.build.script.dir" value="${nlbuildroot}/build_scripts" />
    <mkdir dir="${common.build.script.dir}" />
    <import file="${common.build.script.dir}/version_build.xml" />
    <import file="${common.build.script.dir}/ivy_build.xml" />

    <!-- New build pattern. Paths to be built-->
    <path id="build-paths">
        <pathelement path="${src.root.dir}/common/version" />
        <pathelement path="${src.root.dir}/common/resources" />
        <pathelement path="${src.root.dir}/common/framework" />
        <pathelement path="${src.root.dir}/server/base" />
        <pathelement path="${src.root.dir}/server/framework" />
        <pathelement path="${src.root.dir}/server/container/base" />
        <pathelement path="${src.root.dir}/server/security" />
        <pathelement path="${src.root.dir}/common/domain" />
        <pathelement path="${src.root.dir}/common/oil" />
        <pathelement path="${src.root.dir}/client/agent/ipc" />
        <pathelement path="${src.root.dir}/server/directory" />
        <pathelement path="${src.root.dir}/common/pf" />
        <pathelement path="${src.root.dir}/common/dictionary" />
        <pathelement path="${src.root.dir}/server/dictionary" /> 
    </path>

    <!-- New build pattern. Build all new build modules-->
    <target name="new_build">
        <subant buildpathref="build-paths" verbose="true" inheritrefs="false" inheritall="false">
            <property name="build.root.dir" value="${build.root.dir}" />
            <target name="build" />
            <target name="publish_local" />
        </subant>	  
    </target>

    <target name="build-all" 
            description="Build all components" 
            depends="create_version_jar, new_build">	    
        <ant dir="build-scripts/tasks" target="build" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="build" inheritRefs="true"/>
        <antcall target="package" />
    </target>

    <!-- New build pattern. Clean all new build modules-->
    <target name="new_clean">
        <subant buildpathref="build-paths" inheritall="false" inheritrefs="false" verbose="false">
            <property name="build.root.dir" value="${build.root.dir}" />
            <target name="clean" />
        </subant>
    </target>

    <target name="clean-all" depends="new_clean" description="Cleans the entire project">
        <ant dir="build-scripts/tasks" target="build" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="clean" inheritRefs="true"/>
    </target>

    <target name="rebuild-all" description="Cleans entire project followed by a full build" depends="clean-all, build-all"/>
    
    <target name="rebuild-all-java" description="Cleans entire java build followed by a full build" depends="clean-all-java, build-all"/>
    <target name="rebuild-integration" description="Cleans entire project and builds for the purposes of integration test" depends="clean-all, build-all">
        <ant dir="build-scripts/project" target="build-native" inheritRefs="true">
            <property name="enforcers.dir" value="${enforcers.dir}" />
        </ant>	
        <!--		<ant dir="build-scripts/project" target="build-drivers" inheritRefs="true"/> -->
        
        <!-- temp patch for the build system, fix bugs 6326,6344 -->
        <copy 
            file="${build.root.dir}/platform/win32/release/bin/customAttrSetter.exe"
            todir="${build.root.dir}/tools/setattribute/" 
            overwrite = "true"
            />
    </target>

    <target name="clean-all-java" depends="new_clean" description="Cleans the entire java build but leaves the C++ projects">
        <ant dir="build-scripts/tasks" target="build" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="clean-java" inheritRefs="true"/>
    </target>

    <target name="checkStyleAndTest-all" depends="rebuild-all">
        <ant dir="build-scripts/project" target="check-style" inheritRefs="true"/>		
        <ant dir="build-scripts/project" target="all-javadocs" inheritRefs="true"/>		
        <ant dir="build-scripts/project" target="test-all" inheritRefs="true"/>
    </target>
    
    <target name="buildAndTestAll">
        <ant dir="build-scripts/tasks" target="build" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="stop-tomcat-servers" inheritRefs="true"/>			
        <antcall target="clean-all" inheritRefs="true"/>
        <antcall target="create_version_jar" inheritRefs="true"/>
        <antcall target="new_build" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="build" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="build-native" inheritRefs="true"/>		
        <!--		<ant dir="build-scripts/project" target="build-drivers" inheritRefs="true"/> -->
        
        <!-- temp patch for the build system, fix bugs 6326,6344 -->
        <!--		<copy 
            file="${build.root.dir}/platform/win32/release/bin/customAttrSetter.exe"
            todir="${build.root.dir}/tools/setattribute/" 
            overwrite = "true"
            /> -->
        
        <antcall target="package" />
        <ant dir="build-scripts/project" target="build-installers" inheritRefs="true"/>	
        <!--		<ant dir="build-scripts/project" target="build-dev-edition" inheritRefs="true"/> -->
        <ant dir="build-scripts/project" target="rebuild-env" inheritRefs="true"/>
        <!--		<ant dir="build-scripts/project" target="test-integration-run" inheritRefs="true"/>			
            <ant dir="build-scripts/project" target="rebuild-env" inheritRefs="true"/> -->
        <antcall target="test-all" inheritRefs="true"/>
    </target>

    <target name="buildOnly">
        <ant dir="build-scripts/tasks" target="build" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="stop-tomcat-servers" inheritRefs="true"/>			
        <antcall target="clean-all" inheritRefs="true"/>
        <antcall target="create_version_jar" inheritRefs="true"/>
        <antcall target="new_build" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="build" inheritRefs="true"/>
        <antcall target="package" />
        <antcall target="set-up-openaz"/>
        <antcall target="set-up-linux"/>
   </target>
    
    <target name="buildOnlyCCConsole">
        <ant dir="build-scripts/tasks" target="build" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="stop-tomcat-servers" inheritRefs="true"/>
        <antcall target="clean-all" inheritRefs="true"/>
        <antcall target="create_version_jar" inheritRefs="true"/>
        <antcall target="new_build" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="build-cc-Console" inheritRefs="true"/>
    </target>

    <target name="copy-dpc-config-files">
        <copy todir="${param.dpc.config.root}/security" file="${build.root.dir}/server-security/temp_agent-keystore.jks"/>
    
        <copy todir="${param.dpc.config.root}">
            <fileset dir="${build.root.dir}/config">
                <include name="commprofile.xml"/>
                <include name="agentprofile.xml"/>
                <include name="config.dat"/>
                <include name="mapping.xml"/>
            </fileset>
        </copy>
    </target>
        
    <target name="make-dpc-directories">
        <mkdir dir="${param.dpc.root.dir}"/>
        <mkdir dir="${param.dpc.root.dir}/certificates"/>
        <mkdir dir="${param.dpc.root.dir}/config_setup"/>
        <mkdir dir="${param.dpc.root.dir}/dpc"/>
        <mkdir dir="${param.dpc.root.dir}/dpc/config"/>
        <mkdir dir="${param.dpc.root.dir}/dpc/config/security"/>
        <mkdir dir="${param.dpc.root.dir}/dpc/logs"/>
        <mkdir dir="${param.dpc.root.dir}/logs"/>
    </target>
        
    <target name="copy-dpc-decrypt-files">
        <copy todir="${param.dpc.root}">
            <fileset dir="${src.root.dir}/server/container/dpc/decrypt/">
                <include name="decrypt.bat"/>
                <include name="decrypt.sh"/>
            </fileset>
        </copy>
        
        <copy todir="${param.dpc.root}/decryptj">
            <fileset dir="${build.root.dir}">
                <include name="agent-controlmanager.jar"/>
                <include name="agent-tools.jar"/>
                <include name="client-pf.jar"/>
                <include name="common-domain.jar"/>
                <include name="common-domain-types.jar"/>
                <include name="common-framework.jar"/>
                <include name="common-framework-types.jar"/>
                <include name="common-pf.jar"/>
                <include name="crypt.jar"/>
                <include name="management-types.jar"/>
            </fileset>
            
            <fileset dir="${xlib_jar_dir}">
                <include name="axis.jar"/>
                <include name="castor-0.9.5.4.jar"/>
                <include name="commons-logging.jar"/>
                <include name="jaxrpc.jar"/>
                <include name="xercesImpl.jar"/>
            </fileset>
        </copy>
    </target>
    
    <target name="set-up-conf-struct">
        <antcall target="make-dpc-directories">
            <param name="param.dpc.root.dir" value="${build.root.dir}/nextlabs/tomcat"/>
        </antcall>
        
        <mkdir dir="${build.root.dir}/nextlabs/tomcat/server_lib"/>
        <mkdir dir="${build.root.dir}/nextlabs/tomcat/shared_lib"/>
        
        <copy todir="${build.root.dir}/nextlabs/tomcat">
            <fileset dir="${build.root.dir}/run/server/apps">
                <include name="dpc.war"/>
            </fileset>
        </copy>
        
        <copy todir="${build.root.dir}/nextlabs/tomcat/config_setup" file="${src.root.dir}/server/container/dpc/conf_setup/server.txt"/>
        <copy todir="${build.root.dir}/nextlabs/tomcat/config_setup" file="${src.root.dir}/server/container/dpc/conf_setup/logging.txt"/>

        <antcall target="copy-dpc-decrypt-files">
            <param name="param.dpc.root" value="${build.root.dir}/nextlabs/tomcat/dpc/"/>
        </antcall>
        
        <antcall target="copy-dpc-config-files">
            <param name="param.dpc.config.root" value="${build.root.dir}/nextlabs/tomcat/dpc/config"/>
        </antcall>

        <copy todir="${build.root.dir}/nextlabs/tomcat/server_lib">
            <fileset dir="${build.root.dir}/run/server/tomcat/lib"> 
                <include name="crypt.jar"/>
                <include name="server-security.jar"/>
            </fileset>
        </copy>
        
        <copy todir="${build.root.dir}/nextlabs/tomcat/shared_lib">
            <fileset dir="${build.root.dir}/run/server/tomcat/shared/lib"/>
            <fileset dir="${xlib_jar_dir}" includes="commons-logging-1.1.1.jar"/>
        </copy>		
    </target>
    
    <!-- creating jboss pc directory structure -->
    <target name="set-up-conf-jboss">
        <antcall target="make-dpc-directories">
            <param name="param.dpc.root.dir" value="${build.root.dir}/nextlabs/jbosspc"/>
        </antcall>
        
        <mkdir dir="${build.root.dir}/nextlabs/jbosspc/deployments"/>
        <mkdir dir="${build.root.dir}/nextlabs/jbosspc/tools"/>		
        <mkdir dir="${build.root.dir}/nextlabs/jbosspc/dpc"/>
        <mkdir dir="${build.root.dir}/nextlabs/jbosspc/dpc/configuration"/>
        <mkdir dir="${build.root.dir}/nextlabs/jbosspc/dpc/configuration/main"/>
        <mkdir dir="${build.root.dir}/nextlabs/jbosspc/dpc/decryptj"/>
        <mkdir dir="${build.root.dir}/nextlabs/jbosspc/dpc/jservice"/>
        <mkdir dir="${build.root.dir}/nextlabs/jbosspc/dpc/jservice/config"/>
        <mkdir dir="${build.root.dir}/nextlabs/jbosspc/dpc/jservice/jar"/>
        <mkdir dir="${build.root.dir}/nextlabs/jbosspc/dpc/jservice/jar/javasdk"/>
        <mkdir dir="${build.root.dir}/nextlabs/jbosspc/tools/crypt"/>		
        
        <copy todir="${build.root.dir}/nextlabs/jbosspc/deployments">
            <fileset dir="${build.root.dir}/run/server/apps">
                <include name="dpc.war"/>
            </fileset>
        </copy>		
        
        <copy todir="${build.root.dir}/nextlabs/jbosspc/tools/crypt">
            <fileset dir="${build.root.dir}/tools/jbosscrypt">
                <include name="crypt.jar"/>
                <include name="mkpassword.bat"/>
                <include name="mkpassword.sh"/>
                <include name="common-framework.jar"/>
            </fileset>			
        </copy>			

        <copy todir="${build.root.dir}/nextlabs/jbosspc/config_setup">
            <fileset dir="${src.root.dir}/etc">
                <include name="jboss-standalone.xml.txt"/>
            </fileset>			
        </copy>						
        
		<!-- app.properties needs to be copied to destination as dpc.properties -->
        <copy file="${src.root.dir}/server/container/dpc/etc/app.properties" tofile="${build.root.dir}/nextlabs/jbosspc/dpc/dpc.properties"/>
        
        <antcall target="copy-dpc-config-files">
            <param name="param.dpc.config.root" value="${build.root.dir}/nextlabs/jbosspc/dpc/config"/>
        </antcall>

        <antcall target="copy-dpc-decrypt-files">
            <param name="param.dpc.root" value="${build.root.dir}/nextlabs/jbosspc/dpc"/>
        </antcall>
    </target>

    <target name="set-up-embeddedpdp">
        <mkdir dir="${build.root.dir}/embeddedpdp-staging"/>
        <mkdir dir="${build.root.dir}/embeddedpdp-staging/main"/>
        <mkdir dir="${build.root.dir}/embeddedpdp-staging/lib"/>

        <copy todir="${build.root.dir}/embeddedpdp-staging">
            <fileset dir="${xlib_dir}/onejar">
                <exclude name="boot-manifest.mf"/>
            </fileset>
        </copy>			

        <copy todir="${build.root.dir}/embeddedpdp-staging">
            <fileset dir="${build.root.dir}/client/agent/controlmanager/embeddedapi">
                <include name="**/pdpapi/*.class"/>
            </fileset>
        </copy>
        
        <copy todir="${build.root.dir}/embeddedpdp-staging/lib">
            <fileset dir="${build.root.dir}/agent/lib">
                <include name="*.jar"/>
                <exclude name="agent-ipc.jar"/>
                <exclude name="agent-controlmanager.jar"/>
            </fileset>
        </copy>
        
        <copy todir="${build.root.dir}/embeddedpdp-staging/lib">
            <fileset dir="${build.root.dir}">
                <include name="agent-controlmanager-embeddedapi.jar"/>
            </fileset>
        </copy>
            
        <copy file="${xlib_jar_dir}/dnsjava.jar" tofile="${build.root.dir}/embeddedpdp-staging/lib/dnsjava.jar" preservelastmodified="true" overwrite="false"/>
        <copy file="${nlbuildroot}/src/etc/ehcache-failsafe.xml" tofile="${build.root.dir}/embeddedpdp-staging/ehcache-failsafe.xml" preservelastmodified="true" overwrite="false"/>
        <copy file="${build.root.dir}/agent-ipc/agent-ipc-stub.jar" tofile="${build.root.dir}/embeddedpdp-staging/lib/agent-ipc.jar" preservelastmodified="true" overwrite="false"/>

        <mkdir dir="${build.root.dir}/nextlabs/embeddedpdp"/>
        <mkdir dir="${build.root.dir}/nextlabs/embeddedpdp/config"/>
        <mkdir dir="${build.root.dir}/nextlabs/embeddedpdp/config/security"/>
        <mkdir dir="${build.root.dir}/nextlabs/embeddedpdp/logs"/>
        
        <jar manifest="${nlbuildroot}/src/etc/embeddedpdp.mf" destfile="${build.root.dir}/nextlabs/embeddedpdp/embeddedpdp.jar">
            <fileset dir="${build.root.dir}/embeddedpdp-staging"/>
        </jar>
        
	   <antcall target="copy-dpc-decrypt-files">
            <param name="param.dpc.root" value="${build.root.dir}/nextlabs/embeddedpdp"/>
        </antcall>

        <antcall target="copy-dpc-config-files">
            <param name="param.dpc.config.root" value="${build.root.dir}/nextlabs/embeddedpdp/config"/>
        </antcall>
    </target>
    
    <target name="compile-openaz">
        <ant dir="build-scripts/project" target="build-client-openaz-pep" inheritRefs="true"/>
    </target>

    <target name="set-up-linux">
        <mkdir dir="${build.root.dir}/linux"/>
        <copy todir="${build.root.dir}/linux" overwrite="true" failonerror="false">
            <fileset dir="${nlbuildroot}/src/etc/linux"/>
        </copy>
    </target>
    
    <target name="set-up-openaz" depends="compile-openaz, set-up-embeddedpdp">
        <property name="openaz_dir" value="${build.root.dir}/nextlabs-openaz-pep" />
        <property name="openaz_java_dir" value="${openaz_dir}/java" />
        <property name="openaz_java_libs_dir" value="${openaz_java_dir}/libs" />
        <property name="openaz_java_samples_dir" value="${openaz_java_dir}/sample_code" />
        <property name="openaz_java_samples_config_dir" value="${openaz_java_dir}/sample_code/config" />
        <property name="openaz_js_dir" value="${openaz_dir}/js" />

        <!-- Create the required paths -->
        <mkdir dir="${openaz_java_libs_dir}"/>
        <mkdir dir="${openaz_java_samples_dir}"/>
        <mkdir dir="${openaz_java_samples_config_dir}"/>
        <mkdir dir="${openaz_js_dir}"/>

        <!-- Copy the required class files -->
        <copy todir="${openaz_java_samples_dir}" overwrite="true" failonerror="false">
            <fileset dir="${nlbuildroot}/src/client/openaz/src/java/test/">
                <include name="**/*.java"/>
                <exclude name="**/EmbeddedSampleClient.java"/>
            </fileset>
        </copy>
        
        <!-- Copy docs -->
        <copy todir="${openaz_java_dir}" overwrite="true" failonerror="false">
            <fileset dir="${nlbuildroot}/src/client/openaz">
                <include name="**/*.MD" />
                <include name="**/*.html" />
            </fileset>
        </copy>

        <!-- copy embeddedpdp.jar file -->
        <copy file="${build.root.dir}/nextlabs/embeddedpdp/embeddedpdp.jar" todir="${openaz_java_libs_dir}" verbose="true" />

        <copy file="${nlbuildroot}/src/client/openaz/src/java/test/resources/openaz-pep.properties" todir="${openaz_java_samples_config_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
        <copy file="${nlbuildroot}/src/client/openaz/src/java/test/resources/openaz-pep-on-prem.properties" todir="${openaz_java_samples_config_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
        <copy file="${nlbuildroot}/src/client/openaz/src/java/test/cloudaz_request.bat" todir="${openaz_java_samples_dir}" preservelastmodified="true" overwrite="false" verbose="true" />
        <copy file="${nlbuildroot}/src/client/openaz/src/java/test/cloudaz_request.sh" todir="${openaz_java_samples_dir}" preservelastmodified="true" overwrite="false" verbose="true" />

        <!-- Copy the required jars -->
        <copy file="${build.root.dir}/nextlabs-openaz-pep.jar" todir="${openaz_java_dir}" preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />

        <copy file="${xlib_jar_dir}/commons-lang-2.6.jar" todir="${openaz_java_libs_dir}"  preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />
        <copy file="${xlib_jar_dir}/httpclient-4.3.1.jar" todir="${openaz_java_libs_dir}"  preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />
        <copy file="${xlib_jar_dir}/httpcore-4.3.jar" todir="${openaz_java_libs_dir}"  preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />
        <copy file="${xlib_jar_dir}/openaz-pep-0.0.1-SNAPSHOT.jar" todir="${openaz_java_libs_dir}" preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />
        <copy file="${xlib_jar_dir}/openaz-xacml-0.0.1-SNAPSHOT.jar" todir="${openaz_java_libs_dir}" preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />
		<copy file="${xlib_jar_dir}/commons-logging-1.1.1.jar" todir="${openaz_java_libs_dir}" preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />
		<copy file="${xlib_jar_dir}/commons-lang3-3.3.2.jar" todir="${openaz_java_libs_dir}" preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />
		<copy file="${xlib_jar_dir}/guava-19.0.jar" todir="${openaz_java_libs_dir}" preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />
		<copy file="${xlib_jar_dir}/jackson-annotations-2.6.0.jar" todir="${openaz_java_libs_dir}" preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />
        <copy file="${xlib_jar_dir}/jackson-core-2.6.3.jar" todir="${openaz_java_libs_dir}" preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />
        <copy file="${xlib_jar_dir}/jackson-databind-2.6.3.jar" todir="${openaz_java_libs_dir}" preservelastmodified="true" overwrite="true" verbose="true" failonerror="true" />

        <!-- copy opeaz-nodejs code -->
        <copy todir="${openaz_js_dir}" overwrite="true" failonerror="false">
            <fileset dir="${env.DESTINY_OPENAZ_NODEJS_SRC_TREE_ROOT}">
                <exclude name="**/.git/**"/>
                <exclude name="**/.gitignore"/>
                <exclude name="**/test/**"/>
            </fileset>
        </copy>

        <!-- put configuration files for on-prem -->
        <move file="${openaz_java_samples_config_dir}/openaz-pep-on-prem.properties" verbose="true" tofile="${openaz_java_samples_config_dir}/openaz-pep-on-prem.properties"/>
        <move file="${openaz_js_dir}/sample_code/config/openaz-pep-on-prem.json" verbose="true" tofile="${openaz_js_dir}/sample_code/config/openaz-pep-on-prem.json"/>

        <echo message="INFO: Nextlabs-OpenAZ-PEP ZIP = ${build.root.dir}/Nextlabs-OpenAZ-PEP-${version_str}-${build_number}.zip"/>
    </target>

    <target name="installerOnly">
        <antcall target="package" />
        <ant dir="build-scripts/project" target="build-installers" inheritRefs="true"/>
    </target>

    <target name="cc-CI-Build" depends="buildAndTestAll">
        <fail if="junit.fail" message="One or more unit tests have failed!" />
    </target>

    <target name="cc-Nightly-Build" depends="buildAndTestAll">
    </target>

    <target name="cc-test-integration">
        <ant dir="build-scripts/project" target="test-integration-run" inheritRefs="true"/>
    </target>
    
    <target name="cc-test-all">
        <ant dir="build-scripts/project" target="rebuild-env" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="test-all" inheritRefs="true"/>
    </target>
    
    <!--	<ant dir="build-scripts/project" target="test-integration" inheritRefs="true"/>
        <ant dir="build-scripts/project" target="generate-test-report" inheritRefs="true"/>			-->
    
    <!-- New build pattern. Build all new build modules-->
    <target name="new_test_all">
        <!-- The following two tasks must be ran seperately.  Otherwise, the "resolve" task is not run before publish_report which will cause the publish to function incorrectly.  Fix when the "publish" task allows a resolveId attribute -->
        <subant buildpathref="build-paths" verbose="true">
            <property name="build.root.dir" value="${build.root.dir}" />
            <target name="test" />
        </subant>	  
        <subant buildpathref="build-paths" verbose="true">
            <property name="build.root.dir" value="${build.root.dir}" />
            <target name="publish_report" />
        </subant>	
    </target>

    <target name="package_for_targetenv">
        <copy file="${xlib_bin32_dir}/InstallerCommon32.dll" tofile="${build.root.dir}/platform/win32/installer/release/installercommon.dll" preservelastmodified="true" overwrite="false" />
        <copy file="${xlib_bin32_dir}/InstallerCommon32.dll" tofile="${build.root.dir}/platform/win32/installer/debug/installercommon.dll" preservelastmodified="true" overwrite="false" />
        <copy file="${xlib_bin32_dir}/Installer_CA32.dll" tofile="${build.root.dir}/platform/win32/release/bin/Installer_CA.dll" preservelastmodified="true" overwrite="false" />

        <if>
            <equals arg1="${targetenv}" arg2="win_x86"/>
            <then>
        <copy file="${xlib_bin32_dir}/IPCJNI32.dll" tofile="${build.root.dir}/release_${targetenv}/IPCJNI.dll" preservelastmodified="true" overwrite="false" />
        <copy file="${xlib_bin32_dir}/NetworkUtils32.dll" tofile="${build.root.dir}/release_${targetenv}/NetworkUtils.dll" />
        <copy file="${xlib_bin32_dir}/ResourcePathDiscovery.exe" todir="${build.root.dir}/release_${targetenv}" />
            </then>
            <else>
                <copy file="${xlib_bin64_dir}/IPCJNI.dll" tofile="${build.root.dir}/release_${targetenv}/IPCJNI.dll" preservelastmodified="true" overwrite="false" />
                <copy file="${xlib_bin64_dir}/NetworkUtils.dll" tofile="${build.root.dir}/release_${targetenv}/NetworkUtils.dll" />
                <copy file="${xlib_bin64_dir}/ResourcePathDiscovery.exe" todir="${build.root.dir}/release_${targetenv}" />
            </else>
        </if>

        <copy file="${xlib_bin32_dir}/XSLTransformer.exe" todir="${build.root.dir}/platform/win32/installer/release" />
    </target>

    <target name="package">
        <ant antfile="tomcat_build.xml" target="setup_tomcat" />
        
        <copy file="${build.root.dir}/run/server/license/license.dat" todir="${build.root.dir}" />

        <copy file="${build.root.dir}/config/commprofile.template.xml" todir="${build.root.dir}" />
        <copy file="${build.root.dir}/config/mapping.xml" todir="${build.root.dir}" />
        <copy file="${build.root.dir}/config/folder.info" todir="${build.root.dir}" />
        <copy file="${build.root.dir}/config/agentprofile.xml" todir="${build.root.dir}" />
        <copy file="${build.root.dir}/agent/logging.properties-template" tofile="${build.root.dir}/logging.template.properties" />

        <foreach list="${targetenv.list}" 
                 target="package_for_targetenv" 
                 param="targetenv" 
                 delimiter=";" 
                 inheritall="true" 
                 inheritrefs="true"/>
    </target>

    <target name="test-all" depends="new_test_all" description="Runs all unit tests for the system">
        <antfetch dir="build-scripts/project" target="test-all" inheritRefs="true" return="junit.fail"/>
    </target>
    
    <!-- Temporary tasks to publish artifacts locally -->
    <target name="resolve" 
            description="Resolve all dependencies" 
            depends="init_ivy">
        <ivy:resolve conf="*" resolveId="module_resolve_id" file="../ivy.xml"/>
    </target>

    <target name="publish_locally" depends="resolve">
        <ivy:publish artifactspattern="${build.root.dir}/([releasetype]_)([os]_)([arch])/([compiler])[artifact].[ext]"
                     resolver="local-repository"
                     overwrite="true"
                     forcedeliver="true"
                     publishivy="true"
                     haltonmissing="true"
                     pubrevision="100000.${ivy.revision.module_resolve_id}"
                     /> <!-- The pub revision is large to make sure it is taken.  Tried using "latest-strategies" special meaning words, but this didn't work out.  See comments in "ivysettings.xml" file. -->
        <!-- Need a way to publish ivy files without having to publish all confs-->
    </target>
</project>
